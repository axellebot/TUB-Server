<?php
namespace BourgMapper\TubBundle\Entity\Repository;

use BourgMapper\TubBundle\Entity;
use Doctrine\Common\Collections\ArrayCollection as ArrayCollection;
use Doctrine\ORM\EntityRepository as EntityRepository;

/**
 * StopGroupRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StopGroupRepository extends EntityRepository
{

    const WAY_OUTBOUND = "O";
    const WAY_INBOUND = "I";

    /**
     * Get All Stop Id from Line Id
     *
     * @return array - Array of Stop id
     * @param $line_id
     */
    public function getStopIdsFromLineId($line_id)
    {
        $stop_ids = $this->createQueryBuilder('sg')
            ->select('IDENTITY (sg.stop) AS id')
            ->distinct()
            ->where('sg.line = :line_id')
            ->setParameter('line_id', $line_id)
            ->getQuery()
            ->getResult();

        return $stop_ids;
    }

    /**
     * Get All Stop from Line Id
     *
     * @return array - Array of Stop
     * @param $line_id
     */
    public function getStopsFromLineId($line_id)
    {
        $em = $this->getEntityManager();
        $stopRepository = $em->getRepository("TubBundle:Stop");

        $stop_ids = $this->getStopIdsFromLineId($line_id);

        $stops = array();

        foreach ($stop_ids as $stop_id) {
            $stop = $stopRepository->find($stop_id);
            array_push($stops, $stop);
        }

        return $stops;
    }

    /**
     * Get All Stop from Line
     *
     * @return array - Array of Stop
     * @param $line
     */
    public function getStopsFromLine($line)
    {
        $em = $this->getEntityManager();
        $stopRepository = $em->getRepository("TubBundle:Stop");

        $stop_ids = $this->getStopIdsFromLineById($line->getId());

        $stops = array();

        foreach ($stop_ids as $stop_id) {
            array_push($stops, $stopRepository->find($stop_id));
        }
        return $stops;
    }

    /**
     * Get All Line Id from Stop Id
     *
     * @return array - Array of Line id
     * @param $stop_id
     */
    public function getLineIdsFromStopId($stop_id)
    {

        $results = $this->createQueryBuilder('sg')
            ->select('IDENTITY (sg.line)')
            ->distinct()
            ->where('sg.stop = :stop_id')
            ->setParameter('stop_id', $stop_id)
            ->getQuery()
            ->getResult();

        $line_ids = array();

        foreach ($results as $result) {
            $line_id = $result[1];
            array_push($line_ids, $line_id);
        }

        return $line_ids;
    }

    /**
     * Get All Line from Stop Id
     *
     * @return array - Array of Stop
     * @param $stop_id
     */
    public function getLinesFromStopId($stop_id)
    {
        $em = $this->getEntityManager();
        $lineRepository = $em->getRepository("TubBundle:Line");

        $line_ids = $this->getLineIdsFromStopId($stop_id);

        $lines = array();

        foreach ($line_ids as $line_id) {
            $line = $lineRepository->find($line_id);
            array_push($lines, $line);
        }

        return $lines;
    }

    /**
     * Get All Line from Stop
     *
     * @return array - Array of Line
     * @param $stop
     */
    public function getLinesFromStop($stop)
    {
        $em = $this->getEntityManager();
        $lineRepository = $em->getRepository("TubBundle:Line");

        $line_ids = $this->getLineIdsFromStopById($stop->getId());

        $lines = array();

        foreach ($line_ids as $line_id) {
            array_push($lines, $lineRepository->find($line_id));
        }
        return $lines;
    }

}
