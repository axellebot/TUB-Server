<?php
namespace BourgMapper\TubBundle\Entity\Repository;

use BourgMapper\TubBundle\Entity;
use BourgMapper\TubBundle\Entity\StopGroup;
use BourgMapper\TubBundle\Model\LinePath;
use Doctrine\Common\Collections\ArrayCollection as ArrayCollection;
use Doctrine\ORM\EntityRepository as EntityRepository;
use Fisharebest\Algorithm\Dijkstra;

/**
 * StopGroupRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StopGroupRepository extends EntityRepository
{

    const WAY_OUTBOUND = "O";
    const WAY_INBOUND = "I";

    /**
     * Get All Stop Id of Line by Id
     *
     * @return array - Array of Stop id
     * @param $line_id
     */
    public function getStopIdsOfLineById($line_id)
    {
        $results = $this->createQueryBuilder('sg')
            ->select('IDENTITY (sg.stop) AS stop_id')
            ->distinct()
            ->where('sg.line = :line_id')
            ->setParameter('line_id', $line_id)
            ->getQuery()
            ->getResult();


        $stop_ids = array();
        foreach ($results as $result) {
            array_push($stop_ids, $result["stop_id"]);
        }

        return $stop_ids;
    }

    /**
     * Get All Stop of Line by Id
     *
     * @return array - Array of Stop
     * @param $line_id
     */
    public function getStopsOfLineById($line_id)
    {
        $stops = $this->createQueryBuilder('sg')
            ->select('s')
            ->distinct()
            ->innerJoin('BourgMapper\TubBundle\Entity\Stop', 's', 'WHERE', 'IDENTITY(sg.stop) = s.id')
            ->where('sg.line = :line_id')
            ->setParameter('line_id', $line_id)
            ->getQuery()
            ->getResult();
        return $stops;
    }

    /**
     * Get All Line of Stop by Id
     *
     * @return array - Array of Stop
     * @param $stop_id
     */
    public function getLinesOfStopById($stop_id)
    {
        $lines = $this->createQueryBuilder('sg')
            ->select('l')
            ->distinct()
            ->innerJoin('BourgMapper\TubBundle\Entity\Line', 'l', 'WHERE', 'IDENTITY(sg.line) = l.id')
            ->where('sg.stop = :stop_id')
            ->setParameter('stop_id', $stop_id)
            ->getQuery()
            ->getResult();
        return $lines;
    }

    /**
     * Get All StopGroups ordered From Line Path by Line Id and way
     *
     * @return array - Array of ordered StopGroup
     * @param string $line_id - Id of Line
     * @param string $way - way of path
     */
    public function getStopGroupsFromLinePathByLineIdAndWay($line_id, $way)
    {
        $stopGroup = $this->getFirstStopGroupFromLinePathByLineIdAndWay($line_id, $way);

        $orderedStopGroups = array();

        /** @var StopGroup $stopGroup */
        while ($stopGroup != null) {
            array_push($orderedStopGroups, $stopGroup);
            $stopGroup = $stopGroup->getNextStopGroup();
        }

        return $orderedStopGroups;
    }

    /**
     * Get First StopGroup From Line Path by Line Id and way
     *
     * @return StopGroup - First StopGroup of LinePath
     * @param string $line_id - Id of Line
     * @param string $way - way of path
     */
    public function getFirstStopGroupFromLinePathByLineIdAndWay($line_id, $way)
    {
        /** @var StopGroup $stopGroup */
        $stopGroup = $this->findOneBy(array("line" => $line_id, "way" => $way, "previousStopGroup" => null));
        return $stopGroup;
    }

    /**
     * Get Next StopGroup Id
     *
     * @return string - StopGroup Id if next exist, null otherwise
     * @param $stopGroupId
     */
    public function getNextStopGroupIdOfStopGroupById($stopGroupId)
    {
        $stopGroup = $this->find($stopGroupId);
        /** @var StopGroup $nextStopGroup */
        $nextStopGroup = $stopGroup->getNextStopGroup();
        return ($nextStopGroup) ? $nextStopGroup->getId() : null;
    }

    /**
     * Get Paths from Stop to Stop by id
     *
     * @return array - All path
     * @param $departure_line_id
     * @param $arrival_line_id
     */
    public function getPathsFromStopToStopById($departure_line_id, $arrival_line_id)
    {
        $dijkstra = new Dijkstra($this->getDijkstraSchema());
        $shortestPath = $dijkstra->shortestPaths($departure_line_id, $arrival_line_id);
        return $shortestPath;
    }

    /**
     * @return array - Array of Dijkstra Schema
     */
    public function getDijkstraSchema()
    {
        $em = $this->getEntityManager();
        /** @var StopRepository $stopRepository */
        $stopRepository = $em->getRepository("TubBundle:Stop");

        $stop_ids = $stopRepository->getStopIdsAvailable();


        $dijkstraArray = array();
        $weight = 1;
        foreach ($stop_ids as $stop_id) {
            $arr2 = array();
            $directAccessibleStopIds = $this->getDirectAccessibleStopIdsOfStopById($stop_id);
            foreach ($directAccessibleStopIds as $directAccessibleStopId) {
                $arr2[$directAccessibleStopId] = $weight;
            }
            $dijkstraArray[$stop_id] = $arr2;
        }

        return $dijkstraArray;
    }

    /**
     * @return array - Array of direct accessible stop id
     * @param $stop_id
     */
    public function getDirectAccessibleStopIdsOfStopById($stop_id)
    {
        $accessibleStopIds = array();

        $line_ids = $this->getLineIdsOfStopById($stop_id);

        $tmp = null;
        foreach ($line_ids as $line_id) {

            $tmp = $this->getNextStopIdOfStopFromLinePathById($line_id, StopGroupRepository::WAY_INBOUND, $stop_id);
            if ($tmp != null) {
                array_push($accessibleStopIds, $tmp);
            }
            $tmp = $this->getNextStopIdOfStopFromLinePathById($line_id, StopGroupRepository::WAY_OUTBOUND, $stop_id);
            if ($tmp != null) {
                array_push($accessibleStopIds, $tmp);
            }
        }

        return array_unique($accessibleStopIds);
    }

    /**
     * Get All Line Id of Stop by Id
     *
     * @return array - Array of Line id
     * @param $stop_id
     */
    public function getLineIdsOfStopById($stop_id)
    {

        $results = $this->createQueryBuilder('sg')
            ->select('IDENTITY (sg.line) AS line_id')
            ->distinct()
            ->where('sg.stop = :stop_id')
            ->setParameter('stop_id', $stop_id)
            ->getQuery()
            ->getResult();

        $line_ids = array();
        foreach ($results as $result) {
            array_push($line_ids, $result["line_id"]);
        }

        return $line_ids;
    }

    /**
     * Get Next Stop Id Of Stop From LinePath
     *
     * @return string - Stop Id if next exist, null otherwise
     * @param $line_id
     * @param $way
     * @param $stop_id
     */
    public function getNextStopIdOfStopFromLinePathById($line_id, $way, $stop_id)
    {
        /** @var StopGroup $stopGroup */
        $stopGroup = $this->findOneBy(array(
            'line' => $line_id,
            'way' => $way,
            'stop' => $stop_id));

        if (!$stopGroup) {
            return null;
        }
        $nextStopGroup = $stopGroup->getNextStopGroup();

        return ($nextStopGroup) ? $nextStopGroup->getStop()->getId() : null;
    }
}
